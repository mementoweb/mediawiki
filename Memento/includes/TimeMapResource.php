<?php
/**
 * This file is part of the Memento Extension to MediaWiki
 * https://www.mediawiki.org/wiki/Extension:Memento
 *
 * @section LICENSE
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 * http://www.gnu.org/copyleft/gpl.html
 *
 * @file
 */

/**
 * Ensure that this file is only executed in the right context.
 *

 */

use Wikimedia\Rdbms\IDatabase;

/**
 * This class provides the base functions for all Memento TimeMap types
 */
abstract class TimeMapResource extends MementoResource {

	/*
		note that these patterns are just for detecting timestamp
		pivots; error checking on the length and value of the timestamp
		happens within the class generated by the timeMapFactory
	*/
	const ASCENDINGURLPATTERN = "^[0-9]+\/1\/";
	const DESCENDINGURLPATTERN = "^[0-9]+\/-1\/";

	/*
		this pattern exists to detect that a timestamp pivot exists, not
		which type
	*/
	const PIVOTURLPATTERN = "^[0-9]+\/-*[0-9]\/";

	/**
	 * containsPivot
	 *
	 * Return true if the URL matches the pivot pattern.
	 *
	 * @param string $urlparam the data passed into a SpecialPage
	 *
	 * @return bool true if contains pivot pattern (e.g. /2011010100/-1/)
	 *
	 */
	public static function containsPivot( $urlparam ) {
		return (
			preg_match( '/' . self::PIVOTURLPATTERN .
				'/', $urlparam ) == 1 );
	}

	/**
	 * isPivotAscending
	 *
	 * @param string $urlparam the data passed into a SpecialPage
	 *
	 * @return bool true if pivot is ascending (e.g. /20100424130000/1/)
	 *
	 */
	public static function isPivotAscending( $urlparam ) {
		return (
			preg_match( '/' . self::ASCENDINGURLPATTERN .
				'/', $urlparam ) == 1 );
	}

	/**
	 * isPivotDescending
	 *
	 * @param string $urlparam the data passed into a SpecialPage
	 *
	 * @return bool true if pivot is descending (e.g. /20100424130000/-1/)
	 *
	 */
	public static function isPivotDescending( $urlparam ) {
		return (
			preg_match( '/' . self::DESCENDINGURLPATTERN .
				'/', $urlparam ) == 1 );
	}

	/**
	 * timeMapFactory
	 *
	 * This function determines which TimeMap object behavior we will get
	 * based on the input.
	 *
	 * @param IDatabase $db database connection object
	 * @param Article $article article object for TimeMap
	 * @param string $urlparam the data passed into a SpecialPage
	 *
	 * @return TimeMapResource
	 *
	 */
	public static function timeMapFactory( IDatabase $db, Article $article, $urlparam ) {
		if ( self::containsPivot( $urlparam ) ) {
			if ( self::isPivotAscending( $urlparam ) ) {
				$tm = new TimeMapPivotAscendingResource( $db, $article );
			} elseif ( self::isPivotDescending( $urlparam ) ) {
				$tm = new TimeMapPivotDescendingResource( $db, $article );
			} else {
				$titleMessage = 'timemap-title';
				$textMessage = 'timemap-400-date';

				throw new ErrorPageError( $titleMessage, $textMessage, [ '' ] );

			}
		} else {
			$tm = new TimeMapFullResource( $db, $article );
		}

		return $tm;
	}

	/**
	 * getTitle
	 *
	 * This function extracts the Title from the URL
	 *
	 * @param string $urlparam the data passed into a SpecialPage
	 *
	 * @return Title title object created from URL parsing
	 */
	public static function deriveTitleObject( $urlparam ) {
		if ( self::isPivotAscending( $urlparam ) ) {
			$title = preg_replace(
				'/' . self::ASCENDINGURLPATTERN . '/',
				"", $urlparam );
			$title = Title::newFromText( $title );
		} elseif ( self::isPivotDescending( $urlparam ) ) {
			$title = preg_replace(
				'/' . self::DESCENDINGURLPATTERN . '/',
				"", $urlparam );
			$title = Title::newFromText( $title );
		} else {
			$title = Title::newFromText( $urlparam );
		}

		return $title;
	}

	/**
	 * getDescendingTimeMapData
	 *
	 * Extract the full time map data from the database.
	 *
	 * @param int $pgID identifier of the requested page
	 * @param string $timestamp the timestamp to query for
	 *
	 * @return array $data array with keys 'rev_id' and 'rev_timestamp' containing
	 * 		the revision ID and the revision timestamp respectively
	 */
	public function getDescendingTimeMapData( $pgID, $timestamp ) {
		global $wgMementoTimemapNumberOfMementos;

		$data = [];

		$results = $this->db->select(
			'revision',
			[ 'rev_id', 'rev_timestamp' ],
			[
				'rev_page' => $pgID,
				'rev_timestamp<' . $this->db->addQuotes( $timestamp )
				],
			__METHOD__,
			[
				'ORDER BY' => 'rev_timestamp DESC',
				'LIMIT' => $wgMementoTimemapNumberOfMementos
				]
			);

		$result = $results->fetchRow();

		while ( $result != null ) {
			$datum = [];
			$datum['rev_id'] = $result['rev_id'];
			$datum['rev_timestamp'] = wfTimestamp(
				TS_RFC2822, $result['rev_timestamp']
				);
			$data[] = $datum;
			$result = $results->fetchRow();
		}

		return $data;
	}

	/**
	 * getAscendingTimeMapData
	 *
	 * Extract the full time map data from the database.
	 *
	 * @param int $pgID identifier of the requested page
	 * @param string $timestamp the timestamp to query for
	 *
	 * @return array $data array with keys 'rev_id' and 'rev_timestamp' containing
	 * 		the revision ID and the revision timestamp respectively
	 */
	public function getAscendingTimeMapData( $pgID, $timestamp ) {
		global $wgMementoTimemapNumberOfMementos;

		$data = [];

		$results = $this->db->select(
			'revision',
			[ 'rev_id', 'rev_timestamp' ],
			[
				'rev_page' => $pgID,
				'rev_timestamp>' . $this->db->addQuotes( $timestamp )
				],
			__METHOD__,
			[
				'ORDER BY' => 'rev_timestamp ASC',
				'LIMIT' => $wgMementoTimemapNumberOfMementos
				]
			);

		/*
		 I couldn't figure out how to make the select function do
		 the following:
		 SELECT rev_id, rev_timestamp FROM (SELECT  rev_id,rev_timestamp
		 FROM `revision`  WHERE rev_page = '2' AND
		 (rev_timestamp>'20120101010100')  ORDER BY rev_timestamp
		 ASC LIMIT 3 ) as tempsorter ORDER BY rev_timestamp DESC;
		 so the following code performs the sort in PHP
		*/

		$interim = [];

		$result = $results->fetchRow();

		while ( $result != null ) {
			$interim[$result['rev_timestamp']] = $result['rev_id'];
			$result = $results->fetchRow();
		}

		if ( krsort( $interim ) ) {
			foreach ( $interim as $timestamp => $id ) {
				$datum = [];
				$datum['rev_id'] = $id;
				$datum['rev_timestamp'] = wfTimestamp(
					TS_RFC2822, $timestamp
					);
				$data[] = $datum;
			}

		}

		return $data;
	}

	/**
	 * generateAscendingTimeMapPaginationData
	 *
	 * @param int $pgID the ID of the page, not the oldid
	 * @param string $pivotTimestamp the pivotTimestamp in TS_MW format
	 * @param array &$timeMapPages array passed by reference to hold TimeMap pages
	 * @param Title $title the title of the page
	 *
	 * @return array $timeMapPages - same array that was passed by reference
	 * 			and altered, but now contains an entry that is an array with
	 * 			keys of uri, from, and until representing the next Time Map,
	 * 			its starting time and ending time
	 */
	public function generateAscendingTimeMapPaginationData(
		$pgID, $pivotTimestamp, &$timeMapPages, $title ) {
		$paginatedResults = $this->getAscendingTimeMapData(
			$pgID, $pivotTimestamp
			);

		$timeMapPage = [];

		$timeMapPage['until'] = $paginatedResults[0]['rev_timestamp'];
		$earliestItem = end( $paginatedResults );
		reset( $paginatedResults );
		$timeMapPage['from'] = $earliestItem['rev_timestamp'];

		$timeMapPage['uri'] = SpecialPage::getTitleFor(
				'TimeMap', $pivotTimestamp . '/1/' . $title
			)->getFullURL();

		$timeMapPages[] = $timeMapPage;

		return $timeMapPages;
	}

	/**
	 * generateDescendingTimeMapPaginationData
	 *
	 * @param int $pgID the ID of the page, not the oldid
	 * @param string $pivotTimestamp the pivotTimestamp in TS_MW format
	 * @param array &$timeMapPages array passed by reference to hold TimeMap pages
	 * @param Title $title the title of the page
	 *
	 * @return array $timeMapPages same array that was passed by reference
	 * 			and altered, but now contains an entry that is an array with
	 * 			keys of uri, from, and until representing the next Time Map,
	 * 			its starting time and ending time
	 *
	 */
	public function generateDescendingTimeMapPaginationData(
		$pgID, $pivotTimestamp, &$timeMapPages, $title ) {
		$paginatedResults = $this->getDescendingTimeMapData(
			$pgID, $pivotTimestamp
			);

		$timeMapPage = [];

		$timeMapPage['until'] = $paginatedResults[0]['rev_timestamp'];
		$earliestItem = end( $paginatedResults );
		reset( $paginatedResults );
		$timeMapPage['from'] = $earliestItem['rev_timestamp'];

		$timeMapPage['uri'] = SpecialPage::getTitleFor(
				'TimeMap', $pivotTimestamp . '/-1/' . $title
			)->getFullURL();

		$timeMapPages[] = $timeMapPage;

		return $timeMapPages;
	}

	/**
	 * extractTimestampPivot
	 *
	 * @param string $urlparam the data passed into a SpecialPage
	 *
	 * @return string timestamp if found; null otherwise
	 */
	public function extractTimestampPivot( $urlparam ) {
		$pivot = null;

		$prefix = SpecialPage::getTitleFor( 'TimeMap' )->getLocalURL() . '/';

		$urlparam = str_replace( $prefix, '', $urlparam );

		$pattern = "/^([0-9]{14})\/.*/";

		preg_match( $pattern, $urlparam, $matches );

		if ( count( $matches ) == 2 ) {
			$pivot = $matches[1];
		} else {
			$pivot = null;
		}

		return $pivot;
	}

	/**
	 * formatTimestamp
	 *
	 * Wrapper for wfTimestamp that catches exceptions so the caller can issue
	 * its own error statements instead.
	 *
	 * @see https://www.mediawiki.org/wiki/Manual:WfTimestamp
	 *
	 * @param string $timestamp
	 *
	 * @return formatted timestamp; null if error
	 */
	public function formatTimestampForDatabase( $timestamp ) {
		$formattedTimestamp = null;

		try {
			$formattedTimestamp = wfTimestamp( TS_MW, $timestamp );

			if ( $formattedTimestamp === false ) {
				// the timestamp is unrecognized, but not incorrectly formatted?
				$formattedTimestamp = null;
			}

		} catch ( MWException $e ) {
			// TODO: use ErrorPageError instead?
			// it all went wrong, we passed in bad data
			$formattedTimestamp = null;
		}

		return $formattedTimestamp;
	}

	/**
	 * generateTimeMapText
	 *
	 * Generates Time Map text as per examples in Memento TimeMap RFC
	 * @see http://www.mementoweb.org/guide/rfc/ID/
	 *
	 * @param array $data array with entries containing the keys rev_id and rev_timestamp
	 * @param string $timeMapURI used to construct self TimeMap URI relation
	 * @param Title $titleObj the Title Object for this TimeMap
	 * @param array $pagedTimeMapEntries array of arrays, each entry containing
	 * 			the keys 'uri', 'from', and 'until' referring to the URI of
	 * 			the TimeMap and its from and until dates
	 *
	 * @return string formatted timemap
	 */
	public function generateTimeMapText(
		$data, $timeMapURI, Title $titleObj, $pagedTimeMapEntries = [] ) {
		$outputArray = [];

		$latesturi = $titleObj->getFullURL();
		$title = $this->getFullNamespacePageTitle( $this->article->getTitle() );
		$timegateuri = $this->getTimeGateURI( $title );
		$latestEntry = $this->constructLinkRelationHeader(
			$latesturi, 'original latest-version' );
		$timegateEntry = $this->constructLinkRelationHeader(
			$timegateuri, 'timegate' );

		$from = $data[count( $data ) - 1]['rev_timestamp'];
		$until = $data[0]['rev_timestamp'];

		// we can't really use $this->constructTimeMapLinkHeaderWithBounds
		// because that method creates an entry for a "full", or "starter"
		// TimeMap and generateTimeMapText might be called by a function
		// that is working with a pivot TimeMap
		$timemapEntry = '<' . $timeMapURI .
			'>; rel="self"; type="application/link-format"; ' .
			'from="' . $from . '"; until="' . $until . '"';

		$outputArray[] = $timemapEntry;

		foreach ( $pagedTimeMapEntries as &$pagedTimeMap ) {
			// TODO: make this a function
			$pagedTimemapEntry = '<' . $pagedTimeMap['uri'] .
				'>; rel="timemap"; type="application/link-format";' .
				'from="' . $pagedTimeMap['from'] . '"; ' .
				'until="' . $pagedTimeMap['until'] . '"';

			$outputArray[] = $pagedTimemapEntry;
		}

		$outputArray[] = $timegateEntry;
		$outputArray[] = $latestEntry;

		for ( $i = count( $data ) - 1; $i >= 0; $i-- ) {
			$output = "";
			$datum = $data[$i];

			$uri = $titleObj->getFullURL( [ "oldid" => $datum['rev_id'] ] );

			$output = $this->constructMementoLinkHeaderRelationEntry(
				$uri, $datum['rev_timestamp'], "memento" );

			$outputArray[] = $output;
		}

		// the original implementation of TimeMap for Mediawiki used ,<SP><LF>
		// to separate the entries and added a \n at the end
		$timemap = implode( ",\n", $outputArray );

		return $timemap;
	}

	/**
	 * getFullTimeMapData
	 *
	 * Extract the full time map data from the database.
	 *
	 * @param int $pgID identifier of the requested page
	 * @param int $limit the greatest number of results
	 *
	 * @return array $data containing keys 'rev_id' and 'rev_timestamp'
	 */
	public function getFullTimeMapData( $pgID, $limit ) {
		$data = [];

		$results = $this->db->select(
			'revision',
			[ 'rev_id', 'rev_timestamp' ],
			[ 'rev_page' => $pgID ],
			__METHOD__,
			[
				'ORDER BY' => 'rev_timestamp DESC',
				'LIMIT' => $limit
				]
			);

		$result = $results->fetchRow();

		while ( $result != null ) {
			$datum = [];
			$datum['rev_id'] = $result['rev_id'];
			$datum['rev_timestamp'] = wfTimestamp(
				TS_RFC2822, $result['rev_timestamp']
				);
			$data[] = $datum;
			$result = $results->fetchRow();
		}

		return $data;
	}

	/**
	 * renderFullTimeMap
	 *
	 * This method handles all of the operations of rendering a Full TimeMap
	 * referring to one not requested with a pivot.
	 *
	 */
	public function renderFullTimeMap() {
		global $wgMementoTimemapNumberOfMementos;

		$article = $this->article;
		$out = $article->getContext()->getOutput();
		$titleObj = $article->getTitle();

		$pgID = $article->getTitle()->getArticleID();
		$request = $out->getRequest();
		$response = $request->response();

		$timeMapURI = $request->getFullRequestURL();

		if ( $pgID > 0 ) {
			$results = $this->getFullTimeMapData( $pgID, $wgMementoTimemapNumberOfMementos );

			// get the first revision ID
			$firstId = $titleObj->getFirstRevision()->getId();

			// get the last revision ID
			$lastId = $titleObj->getLatestRevID();

			// calculate the difference
			// this counts the revisions BETWEEN, non-inclusive
			$revCount = $titleObj->countRevisionsBetween( $firstId, $lastId );

			// for first and last
			$revCount = $revCount + 2;

			// if it is greater than limit then get the revision ID prior
			// to the lowest one returned by getFullTimeMapData
			// paginate if we have more than NumberOfMementos Mementos
			$timeMapPages = [];

			$title = $titleObj->getPrefixedURL();

			if ( $revCount > $wgMementoTimemapNumberOfMementos ) {
				$earliestItem = end( $results );
				reset( $results );

				$pivotTimestamp = $this->formatTimestampForDatabase(
						$earliestItem['rev_timestamp'] );

				# this function operates on $timeMapPages in place
				$this->generateDescendingTimeMapPaginationData(
					$pgID, $pivotTimestamp, $timeMapPages, $title );

			}

			$response->header( "Content-Type: application/link-format", true );

			// use that revision ID + limit revisions to calculate the from
			// and until for the next timemap
			echo $this->generateTimeMapText(
				$results, $timeMapURI, $titleObj, $timeMapPages
				);

			$out->disable();
		} else {

			$title = $this->getFullNamespacePageTitle( $titleObj );

			ErrorPageError( 'timemap-title', 'timemap-404-title', [ $title ] );

		}
	}

	/**
	 * renderPivotTimeMap
	 *
	 * This template method handles all of the operations of rendering a
	 * PivotAscending or PivotDescending TimeMap.  It requires the
	 * implementation of the abstract class getPivotTimeMapData.  It is
	 * meant to be called form alterEntity.
	 *
	 */
	public function renderPivotTimeMap() {
		global $wgMementoTimemapNumberOfMementos;

		$article = $this->article;
		$out = $article->getContext()->getOutput();
		$titleObj = $article->getTitle();

		$pgID = $titleObj->getArticleID();
		$request = $out->getRequest();
		$response = $request->response();

		$requestURL = $request->getRequestURL();
		$timeMapURI = $request->getFullRequestURL();

		if ( $pgID > 0 ) {
			$timestamp = $this->extractTimestampPivot( $requestURL );

			if ( !$timestamp ) {
				// we can't trust what came back, and we don't know the pivot
				// so the parameter array is empty below
				ErrorPageError( 'timemap-title', 'timemap-400-date', [ '' ] );
			}

			$formattedTimestamp = $this->formatTimestampForDatabase( $timestamp );

			$results = $this->getPivotTimeMapData(
				$pgID, $formattedTimestamp
				);

			// if we get no results back, then the timestamp is likely outside
			// the range offered by the resource, so return a Full Time Map
			// instead
			if ( !$results ) {
				$this->renderFullTimeMap();
			} else {

				$latestItem = $results[0];
				$earliestItem = end( $results );
				reset( $results );

				$firstId = $titleObj->getFirstRevision()->getId();
				$lastId = $titleObj->getLatestRevId();

				# this counts revisions BETWEEN, non-inclusive
				$revCount = $titleObj->countRevisionsBetween(
					$firstId, $earliestItem['rev_id'] );

				// for first and last
				$revCount = $revCount + 2;

				$timeMapPages = [];

				$title = $titleObj->getPrefixedURL();

				# if $revCount is higher, then we've gone over the limit
				if ( $revCount > $wgMementoTimemapNumberOfMementos ) {
					$pivotTimestamp = $this->formatTimestampForDatabase(
						$earliestItem['rev_timestamp'] );

					$this->generateDescendingTimeMapPaginationData(
						$pgID, $pivotTimestamp, $timeMapPages, $title );

				}

				# this counts revisions BETWEEN, non-inclusive
				$revCount = $titleObj->countRevisionsBetween(
					$latestItem['rev_id'], $lastId );

				// for first and last
				$revCount = $revCount + 2;

				# if $revCount is higher, then we've gone over the limit
				if ( $revCount > $wgMementoTimemapNumberOfMementos ) {
					$pivotTimestamp = $this->formatTimestampForDatabase(
						$latestItem['rev_timestamp'] );

					$this->generateAscendingTimeMapPaginationData(
						$pgID, $pivotTimestamp, $timeMapPages, $title );

				}

				$response->header(
					"Content-Type: application/link-format", true );

				echo $this->generateTimeMapText(
					$results, $timeMapURI, $titleObj, $timeMapPages
					);

				$out->disable();
			}
		} else {
			$title = $this->getFullNamespacePageTitle( $titleObj );

			ErrorPageError( 'timemap-title', 'timemap-404-title', [ $title ] );
		}
	}

	/**
	 * getPivotTimeMapData
	 *
	 * Method that acquires TimeMap data, based on a given formatted timestamp.
	 *
	 * @param int $pageID
	 * @param string $formattedTimestamp
	 *
	 * @return array $data array with keys 'rev_id' and 'rev_timestamp' containing
	 * 		the revision ID and the revision timestamp respectively
	 */
	abstract public function getPivotTimeMapData( $pageID, $formattedTimestamp );
}
